<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>寸草金的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-02T08:10:31.251Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>cuncaojin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>world</title>
    <link href="http://yoursite.com/2017/08/02/world/"/>
    <id>http://yoursite.com/2017/08/02/world/</id>
    <published>2017-08-02T08:10:31.000Z</published>
    <updated>2017-08-02T08:10:31.251Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Scroll分析 ——《群英传》第五章</title>
    <link href="http://yoursite.com/2017/08/02/Android%E5%8A%A8%E7%94%BB%E7%9A%847%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/08/02/Android动画的7种实现方式/</id>
    <published>2017-08-02T02:21:02.456Z</published>
    <updated>2016-12-06T15:42:13.208Z</updated>
    
    <content type="html"><![CDATA[<p><strong>滑动的7种方法</strong></p>
<pre><code>1.layout（int left，int top ，int right， int right）
    * left/top/right/right均为绝对坐标
2.offsetLeftAndRight和offsetTopAndBottom
    * 与layout用法相同，是对layout方法的封装 
3.LayoutParams
    * **LinearLayout.LayoutParams** params = (LinearLayout.LayoutParams)getLayoutParams();
    * params.leftMargin = getLeft() + offsetX();
    * params.topMargin = getRight（）+ offsetY();
    * setLayoutParams(params);

    * **ViewGroup.MarginLayoutParams** params = (ViewGroup.MarginLayoutParams)getLayoutParams();
    * 同上
4.ScrollTo和ScrollBy
    （（View)getParent()).scrollBy(offsetX, offsetY);
    注意：
    1）移动的是内容。如果是ViewGroup，则移动的是子View；如果移动的是TextView，则移动的是文字；如果移动的是ImageView，则移动的是drawable
    2）坐标参考系
        这个比较特殊，可以理解为移动的是屏幕，而非View。举例：一个绝对坐标为（20,10）的Button，如果对其使用（（View)getParent()).scrollBy(20,10），则这个按钮将被移动到（0,0）。
5.Scroller
6.属性动画 
7.ViewDragHelper
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;滑动的7种方法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.layout（int left，int top ，int right， int right）
    * left/top/right/right均为绝对坐标
2.offsetLeftAnd
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android 绘图 ——Android群英传 学习笔记</title>
    <link href="http://yoursite.com/2017/08/02/%E7%BB%98%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/08/02/绘图/</id>
    <published>2017-08-02T02:21:02.425Z</published>
    <updated>2016-12-18T16:39:28.885Z</updated>
    
    <content type="html"><![CDATA[<p>FontMatrics部分参考：<a href="http://mikewang.blog.51cto.com/3826268/871765" target="_blank" rel="external">http://mikewang.blog.51cto.com/3826268/871765</a></p>
<p><strong>核心类</strong></p>
<pre><code>1.Canvas 画布
2.Bitmap 纸
3.Paint 笔
4.｛
    FontMetrics
    PorterDuffXfermode
    Matrix(3x3矩阵) 
    ColorMatrix(4x5矩阵)
    ColorFilter
    Shader
    PathEffect
｝
5. SurfaceView P155，有固定模版用法
</code></pre><p><strong>思想</strong></p>
<pre><code>1.一般初始化Canvas时，要传入一个Bitmap，之后的所有的绘制效果都将呈现在Bitmap上。
    Bitmap mPaper = Bitmap.createBitmap(bm.getWidth(), bm.getHeight(), Bitmap.Config.ARGB_8888);
    mCanvas = new Canvas(mPaper);
    mCanvas.drawBitmap(bm, 0, 0, paint);//将bm用画笔paint画到mPager上
2.在onDraw(canvas)方法中，只需要将步骤1中的纸mPaper绘制到系统提供的画布canvas上即可。
    canvas.drawBitmap(mPaper, 0, 0, null);
3.Paint 
    具有非常强大的功能：
    1）PorterDuffXfermode 滤镜功能：
        mPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
        mPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_OUT));
        设置混合模式，具体效果参考文档，或Android群英传P146.
    2）获取FontMetrics，测量文本尺寸
        Paint.FontMetrics fm = mPaint.getFontMetrics();
        FontMetrics属性：｛
            1. 基准点是baseline
            2. ascent是baseline之上至字符最高处的距离
            3. descent是baseline之下至字符最低处的距离
            4. leading文档说的很含糊，其实是上一行字符的descent到下一行的ascent之间的距离
            5. top指的是指的是最高字符到baseline的值，即ascent的最大值
            6. 同上，bottom指的是最下字符到baseline的值，即descent的最大值

            说明：ascent/descent/top/bottom，这几个值均表示距离baseline的距离。举例：ascent的值，即为字符最高处的y坐标减去baseline的y坐标之差。所以，其永远为负值。同理，descent/bottom永远为正值。
        ｝

        float baseY = - fm.top;
        mCanvas.drawText(&quot;cuncaojin&quot;, 0, baseY, mPaint);

        ![](http://img1.51cto.com/attachment/201205/204735397.png)
    3）Style（空心/实心）
            mPaint.setStyle(Paint.Style.FILL);
            mPaint.setStyle(Paint.Style.STROKE);
            mPaint.setStyle(Paint.Style.FILL_AND_STROKE);
    4）setColorFilter
        ColorMatrix imageMatrix = new ColorMatrix();
        //颜色矩阵，可以设置色调、饱和度、亮度
        imageMatrix.setRotate(0/1/2,hue);//0,1,2——R，G，B 色调
        imageMatrix.setSaturation(saturation);//饱和度为0时，图像为灰度图像
        imageMatrix.setScale(lum, lum, lum, 1);//亮度
        imageMatrix.postConcat(anotherColorMatrix);//将颜色矩阵叠加
        paint.setColorFilter(new ColorMatrixColorFilter(imageMatrix));

    5）setShader（）：主要作用是作为遮罩层，产生特殊效果
        Shader（渲染器）类实现类有{
            a. BitmapShader 位图Shader （相比其他Shader比较特殊）
                {
                    用BitmapShader填充时的3种模式：
                        CLAMP 拉伸
                        REPEAT 重复
                        MIRROR 镜像
                }
            b. LinearGradient 线性Shader
            c. RadialGradient 光束Shader
            d. SweepGradient 梯度Shader
            e. ComposeShader 混合Shader
        }


    6）setPathEffect 路径效果
        a. null    
        b. CornerPathEffect    路径圆滑处理
        c. DiscretePathEffect    产生杂点
        d. DashPathEffect    虚线化
        e. PathDashPathEffect    可设置虚线图形
        f. ComposePathEffect    可组合以上效果


    7）其他属性｛
        setAntiAlias（true）； 抗锯齿
        setStrokeJoin(Paint.Join.ROUND); 设置笔连接处圆滑处理
        setStrokeCap(Paint.Cap.ROUND); 设置笔触圆滑处理
        setStrokeWidth(50);    设置笔宽
        setColor（）；    
        setARGB（）；
        setAlpah（）；
        setTextSize（）；
    ｝    
4.Canvas
    1）绘制｛
        drawPoint
        drawLine
        drawRect
        drawRoundRect
        drawArc 绘制扇形或弧形（由参数useCenter决定，true扇形，false弧形，设置Paint.Style决定是空心还是实心）
        drawOval 绘制椭圆
        drawText 
        drawPosText（text, new float[]{x1,y1,x2,y2,...xn,yn}, paint） 在指定位置逐个对每个字符绘制    
        drawPath 绘制路径
        drawBitmap
    ｝
    2）结合Matrix
        Matrix matrix = new Matrix();
        matrix{
            setRotate()
            setTranslate();    
            setScale();    
            setSkew(); 错切变换/剪切变换
            pre() 先乘
            post() 后乘
        }
        canvas.drawBitmap(mBitmap, matrix ,null);
        ---------------------------------------------
        Canvas mCanvas = new Canvas(mBmp);
        Matrix matrix = new Matrix();
        float scale = w * 1f / getResources().getDisplayMetrics().widthPixels;
        matrix.setScale(scale, scale);
        mCanvas.drawBitmap(bitmap, matrix, mPaint);
    3）Canvas的其他方法｛
        save（） 将之前绘制的所有图像进行保存
        restore() 将save()之后绘制的所有图像与save（）之前的图像进行合并
        translate（） 
        rotate（）
    ｝
</code></pre><p><strong>Demo:</strong></p>
<pre><code>自定义一个圆形图，实现方案｛
    1）使用paint.setXferMode(new PorterXferMode(...))
        a. 绘制圆
        b. 对画笔设置PorterDuffXfermode（SRC_IN）则上步绘制的圆作为遮罩层
        c. （设置缩放比例等）优化绘图效果
        d. 绘制图片
    2） 使用paint.setShader(new BitmapShader(...))
        a. 对画笔设置渲染器为BitmapShader,模式选择拉伸
            mPaint.setShader(new BitmapShader(mBmp, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));
        b. （设置缩放比例等）优化绘图效果
        c. 绘制圆
｝
</code></pre><p><strong>参考代码如下：</strong></p>
<pre><code>方案一：
public CircleView(Context context, AttributeSet attrs) {
    super(context, attrs);
    init();

    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.CircleView);
    int indexCount = typedArray.getIndexCount();
    for (int i = 0; i &lt; indexCount; i++) {
        int index = typedArray.getIndex(i);
        switch (index) {
            case R.styleable.CircleView_src:

                BitmapDrawable drawable = (BitmapDrawable) typedArray.getDrawable(index);
                mBitmap = drawable.getBitmap();
                break;
        }
    }
    typedArray.recycle();
}

private void init() {
    mPaint = new Paint();
    mPaint.setAntiAlias(true);
    mPaint.setStrokeJoin(Paint.Join.ROUND);
}

@Override
protected void onSizeChanged(int w, int h, int oldw, int oldh) {
    super.onSizeChanged(w, h, oldw, oldh);

    mPaper = Bitmap.createBitmap(w, w, Bitmap.Config.ARGB_8888);
    mCanvas = new Canvas(mPaper);
    mPaint.setTextSize(50);
    mPaint.setStrokeWidth(5);
    mPaint.setARGB(255, 255, 0, 0);
    mPaint.setColor(0xff00ff00);
    mPaint.setTextAlign(Paint.Align.LEFT);

    Paint.FontMetrics fm = mPaint.getFontMetrics();
    Log.i(&quot;tag&quot;, fm.ascent + &quot;, leading:&quot; + fm.leading + &quot; ,descent:&quot; + fm.descent + &quot;, bottom:&quot; + fm.bottom + &quot;, &quot; + fm.top);
    float baseY = -fm.ascent;
    mCanvas.drawText(&quot;寸草金CUNJQjinsdaofihwafehofdmvpBGEOUWmevldnbuehwPOS:lXM&quot;, 0, baseY, mPaint);

    Path path = new Path();
    path.moveTo(0, 50);
    path.lineTo(100, 200);
    mCanvas.drawPath(path, mPaint);

    mPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_OUT));

    RectF rect = new RectF(0, 0, w, h);
    mCanvas.drawRoundRect(rect, 50, 50, mPaint);

    mPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));

    Matrix matrix = new Matrix();
    matrix.setScale(w * 1f / mBitmap.getWidth(), w * 1f / mBitmap.getWidth());
    mCanvas.drawBitmap(mBitmap, matrix, mPaint);
}
</code></pre><hr>
<pre><code>方案二：
private void init(Context context, AttributeSet attrs) {
    mPaint = new Paint();
    mPaint.setAntiAlias(true);
    mPaint.setStrokeJoin(Paint.Join.ROUND);
    mPaint.setStrokeCap(Paint.Cap.ROUND);
}

@Override
protected void onSizeChanged(int w, int h, int oldw, int oldh) {
    super.onSizeChanged(w, h, oldw, oldh);
    Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.pic1);
    mBmp = Bitmap.createBitmap(w, w, Bitmap.Config.ARGB_8888);

    Canvas mCanvas = new Canvas(mBmp);
    Matrix matrix = new Matrix();
    float scale = w * 1f / getResources().getDisplayMetrics().widthPixels;
    matrix.setScale(scale, scale);
    mCanvas.drawBitmap(bitmap, matrix, mPaint);

    mPaint.setShader(new BitmapShader(mBmp, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));
}

@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    setMeasuredDimension(widthMeasureSpec, widthMeasureSpec);
}

@Override
protected void onDraw(Canvas canvas) {
    super.onDraw(canvas);
    int r = getWidth() / 2;
    canvas.drawCircle(r, r, r, mPaint);
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FontMatrics部分参考：&lt;a href=&quot;http://mikewang.blog.51cto.com/3826268/871765&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mikewang.blog.51cto.com/382
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>蚂蚁金服. 开放平台. 文档中心</title>
    <link href="http://yoursite.com/2017/08/02/%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%20RSA2/"/>
    <id>http://yoursite.com/2017/08/02/蚂蚁金服开放平台 RSA2/</id>
    <published>2017-08-02T02:21:02.409Z</published>
    <updated>2017-02-02T05:50:36.777Z</updated>
    
    <content type="html"><![CDATA[<p>参考1：<a href="https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.jKJinz&amp;treeId=291&amp;articleId=106103&amp;docType=1" target="_blank" rel="external">https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.jKJinz&amp;treeId=291&amp;articleId=106103&amp;docType=1</a></p>
<p>参考2：<a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html?spm=a219a.7629140.0.0.jtOMMW" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html?spm=a219a.7629140.0.0.jtOMMW</a> （数字签名）</p>
<pre><code>1.RSA和RSA2区别：
    详细参见：
    https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.y7rDdS&amp;treeId=291&amp;articleId=106115&amp;docType=1
    简单来说，签名主要包含两个过程：摘要和非对称加密，
    首先对需要签名的数据做摘要（类似于常见的MD5）后得到摘要结果，然后通过签名者的私钥对摘要结果进行非对称加密即可得到签名结果。

    开放平台支持的签名算法
    开放平台签名算法名称        标准签名算法名称                        备注
    RSA2                    SHA256WithRSA        （强烈推荐使用），强制要求RSA密钥的长度至少为2048，
    RSA                        SHA1WithRSA            对RSA密钥的长度不限制，推荐使用2048位以上
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考1：&lt;a href=&quot;https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.jKJinz&amp;amp;treeId=291&amp;amp;articleId=106103&amp;amp;docType=1&quot; tar
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MVP学习笔记</title>
    <link href="http://yoursite.com/2017/08/02/MVP/"/>
    <id>http://yoursite.com/2017/08/02/MVP/</id>
    <published>2017-08-02T02:21:02.393Z</published>
    <updated>2017-03-02T10:55:38.536Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Sorry，引用文章的地址给忘了哪几个了。忘原作者见谅。</strong></p>
<pre><code>M:Model,关注数据处理
V:View,关注处理视图的可视化及与用户交互
P:Presenter,关注业务处理
</code></pre><p>###在MVP模式里通常包含4个要素：<br>     (1)View:负责绘制UI元素、与用户进行交互(在Android中体现为Activity);<br>     (2)View interface:需要View实现的接口，View通过View interface与Presenter进行交互，降低耦合，方便进行单元测试;<br>     (3)Model:负责存储、检索、操纵数据(有时也实现一个Model interface用来降低耦合);<br>     (4)Presenter:作为View与Model交互的中间纽带，处理与用户交互的负责逻辑。<br><img src="http://img.blog.csdn.net/20150309135723885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdmVjdG9yX3lp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>###总结：</p>
<pre><code>V:持有P的引用，项目规格不大，可以不使用P的接口
P:持有M、V的接口实现对象

**Note:** 
防止Activity或Fragment声明周期结束后，一般执行耗时操作的Presenter层因为持有对Activity或Fragment的强引用，导致内存泄漏。

**处理方法：**
1.  解除绑定关系，在V层生命周期的OnDestory()中，调用P层持有的V，将其置空，解除和P层的关联。
2.  为了弥补在特殊情况下，如系统突然回收内存，导致Activity的onStop、onDestory没有执行便被干掉，造成上一种方式解除绑定代码没有被执行，特还需要使用软引用或弱引用。


/**
 * code from Android源码设计模式
 */
public abstract class BasePresenter&lt;T&gt; {
    protected Reference&lt;T&gt; mViewRef;

    public void attachView(T view) {
        mViewRef = new WeakReference&lt;T&gt;(view);
    }

    protected T getView() {
        return mViewRef.get();
    }

    protected void detachView() {
        if (mViewRef != null) {
            mViewRef.clear();
            mViewRef = null;
        }
    }
}

public abstract class MVPBaseActivity&lt;V, T extends BasePresenter&lt;V&gt;&gt; extends AppCompatActivity {
    BasePresenter mPresenter;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mPresenter = createPresenter();
        mPresenter.attachView((V) this);
    }

    public abstract T createPresenter();

    @Override
    public void onDestroy() {
        mPresenter.detachView();
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Sorry，引用文章的地址给忘了哪几个了。忘原作者见谅。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;M:Model,关注数据处理
V:View,关注处理视图的可视化及与用户交互
P:Presenter,关注业务处理
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>URL由http到https重定向，URLConnection下载失败</title>
    <link href="http://yoursite.com/2017/08/02/HttpURLConnection%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>http://yoursite.com/2017/08/02/HttpURLConnection重定向/</id>
    <published>2017-08-02T02:21:02.393Z</published>
    <updated>2017-02-08T05:27:06.641Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考1：<a href="http://kakaluyi.iteye.com/blog/185255" target="_blank" rel="external">分析为何使用URLConnection下载文件失败的原因</a></strong></p>
<p><strong>参考2：<a href="http://kakaluyi.iteye.com/blog/185255" target="_blank" rel="external">具体解决HttpURLConnection重定向问题参考代码</a></strong></p>
<pre><code>拷贝自参考1文章部分：（防止源网页不可用，感謝原作者填坑）
URLConnection从HTTP重定向到HTTPS
也不知什么原因，公司项目的服务端一直在吸引着大波攻击，于是服务端的同学打算把所有HTTP的请求都换为HTTPS，他们决定兼容旧版本于是就将之前的所有HTTP请求全部重定向到另一个HTTPS请求。 
项目请求框架搭建初期，考虑到应用也不会使用太复杂的请求模式，于是就简单使用URLConnection完成服务端交互。服务端一修改，全部请求都失败了。虽然URLConnection有是否遵循重定向开关（setInstanceFollowRedirects），其默认就是开启的，即便你再强制其打开，也是没有用，问题依旧。找了大量资料，其实问题的关键点不是重定向而是从HTTP重定向到HTTPS，关键点就在URLConnection的两个子类上。

HttpURLConnection与HttpsURLConnection
HttpURLConnection为URLConnection的子类，而HttpsURLConnection为HttpURLConnection的子类，在HttpURLConnection基础上对HTTPS进行支持。 
URLConnection通常使用URL的openConnection()方法获得，而URL是根据其是否为Https开头来打开一个HttpURLConnection还是HttpsURLConnection。 
而当URLConnection进行connect()时，遇到了重定向，如果打开了遵循重定向，那么其会获取重定向的地址，然后尝试连接这个地址。值得注意的是，这时候并不是使用新的链接地址重新openConnection()一个URLConnection，而是直接尝试连接这个重定向的地址，否则也就不存在以上的Bug了。 
于是理论上分析，HTTP重定向到HTTP是不存在问题的，HTTPS重定向到HTTPS也是不存在问题的，而HTTP与HTTPS之间的重定向，那么就很可能会有问题了。HTTP重定向到HTTPS，URLConnection会将重定向的HTTPS以HTTP方式继续提交，那么服务端肯定是认为你是错误的提交方式；同理，HTTPS重定向HTTP也一样。

问题解决
使用URLConnection抓取到重定向，就使用重定向的地址重新人为openConnection()一个新的URLConnection重新请求。
使用第三方请求框架，如OKHttp。
具体项目具体分析，方法一是可行的，但是处理起来就很麻烦了。而方案二则更可选，因为URLConnection与OKHttp用法其实差不了多远
</code></pre><hr>
<p>##URLConnection支持302重定向，Demo</p>
<pre><code>`
package com.cuncaojin.myapplication;

import android.app.ProgressDialog;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;

public class MainActivity extends AppCompatActivity {

    private ProgressDialog mProgressDialog;
    private int mContentLength;
    private long mCurrentLength;
    private Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case 0:
                    if (mContentLength &lt;= 0) {
                        mProgressDialog.setProgress(0);
                        mTextView.setText(0);
                    } else {
                        int p = (int) (mCurrentLength * 100 / mContentLength);
                        mProgressDialog.setProgress(p);
                        mTextView.setText(p + &quot;&quot;);
                    }
                    break;
                case 1:
                    Toast.makeText(MainActivity.this, &quot;Down Finished！&quot;, Toast.LENGTH_LONG).show();
                    mProgressDialog.dismiss();
                    mProgressDialog = null;
                    break;
                case 2:
                    mProgressDialog.show();
                    break;
                default:
                    break;
            }
        }
    };
    private TextView mTextView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mTextView = (TextView) findViewById(R.id.textView);
    }

    public void click(View view) {
        String url = &quot;http://www.chinaums.com/static/ums2013/chinaums/app/download/ppplugin.apk&quot;;
        downLoadFile(url, new File(Environment.getExternalStorageDirectory(), url.substring(url.lastIndexOf(&quot;/&quot;) + 1)));
    }

    private void downLoadFile(final String url, final File destFile) {
        mProgressDialog = new ProgressDialog(this);
        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
        mProgressDialog.setMax(100);
        mProgressDialog.incrementProgressBy(1);
        mProgressDialog.setProgress(0);

        new Thread(new Runnable() {
            @Override
            public void run() {

                mHandler.sendEmptyMessage(2);
                BufferedInputStream in = null;
                BufferedOutputStream out = null;
                HttpURLConnection conn = null;
                try {
                    conn = getHttpURLConnection(conn, url);

                    int times = 5;
                    while (conn.getResponseCode() != HttpURLConnection.HTTP_OK &amp;&amp; times-- &gt; 0) {
                        Log.e(&quot;tag&quot;, &quot;----------ResponseCode: &quot; + conn.getResponseCode()+&quot;, URL:&quot; + url);
                        String url = conn.getHeaderField(&quot;Location&quot;);
                        conn = getHttpURLConnection(conn, url);
                        Log.e(&quot;tag&quot;, &quot;----------NextURL:&quot; + url);
                    }
                    if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                        mContentLength = conn.getContentLength();
                        in = new BufferedInputStream(conn.getInputStream());
                        out = new BufferedOutputStream(new FileOutputStream(destFile));
                        byte[] buffer = new byte[1024];
                        int len = 0;
                        mCurrentLength = 0;

                        while ((len = in.read(buffer)) != -1) {
                            out.write(buffer, 0, len);
                            mCurrentLength += len;
                            mHandler.sendEmptyMessage(0);
                        }
                        out.flush();

                        mHandler.sendEmptyMessage(1);
                    }

                } catch (IOException e) {
                    e.printStackTrace();
                } finally {
                    if (conn != null) {
                        conn.disconnect();
                    }
                    if (in != null) {
                        try {
                            in.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                    if (out != null) {
                        try {
                            out.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }).start();
    }

    @NonNull
    private HttpURLConnection getHttpURLConnection(HttpURLConnection conn, String url) throws IOException {
        conn = (HttpURLConnection) new URL(url).openConnection();
        conn.setConnectTimeout(8000);
        conn.setReadTimeout(8000);
        conn.setInstanceFollowRedirects(false);//不支持重定向
        conn.connect();
        return conn;
    }
}
`
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;参考1：&lt;a href=&quot;http://kakaluyi.iteye.com/blog/185255&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;分析为何使用URLConnection下载文件失败的原因&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>收藏</title>
    <link href="http://yoursite.com/2017/08/02/Android/"/>
    <id>http://yoursite.com/2017/08/02/Android/</id>
    <published>2017-08-02T02:21:02.378Z</published>
    <updated>2017-03-02T11:00:19.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="菜根谭-——-洪应明-必读经典！"><a href="#菜根谭-——-洪应明-必读经典！" class="headerlink" title="菜根谭 —— 洪应明  必读经典！"></a>菜根谭 —— 洪应明  必读经典！</h1><ul>
<li><strong><a href="http://www.gushiwen.org/wenyan/caigen.aspx" target="_blank" rel="external">http://www.gushiwen.org/wenyan/caigen.aspx</a></strong></li>
</ul>
<h1 id="Android-Part-："><a href="#Android-Part-：" class="headerlink" title="Android Part ："></a>Android Part ：</h1><ul>
<li><a href="部分转载自：http://www.jianshu.com/p/34d643c6db3a">部分转载自：http://www.jianshu.com/p/34d643c6db3a</a></li>
</ul>
<h3 id="Android通用流行框架大全"><a href="#Android通用流行框架大全" class="headerlink" title="Android通用流行框架大全"></a>Android通用流行框架大全</h3><ul>
<li><a href="http://www.jianshu.com/p/cdf16cce4ed7" target="_blank" rel="external">http://www.jianshu.com/p/cdf16cce4ed7</a></li>
</ul>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzI4MTQyNDg3Mg==&amp;mid=2247483693&amp;idx=1&amp;sn=e2b39eecec435f6a135e52b60c17fb6d#rd" target="_blank" rel="external">http://mp.weixin.qq.com/s?__biz=MzI4MTQyNDg3Mg==&amp;mid=2247483693&amp;idx=1&amp;sn=e2b39eecec435f6a135e52b60c17fb6d#rd</a></li>
</ul>
<h3 id="周趋势"><a href="#周趋势" class="headerlink" title="周趋势"></a>周趋势</h3><ul>
<li><a href="https://github.com/trending/java?since=weekly" target="_blank" rel="external">https://github.com/trending/java?since=weekly</a></li>
</ul>
<h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><ul>
<li><strong><a href="https://android-developers.googleblog.com/" target="_blank" rel="external">Android官方博客</a></strong></li>
<li><strong><a href="https://www.bignerdranch.com/blog/" target="_blank" rel="external">大书呆子牧场博客</a></strong></li>
<li><strong><a href="http://www.devtf.cn/?p=1264" target="_blank" rel="external">开发技术前线</a></strong></li>
<li><a href="https://possiblemobile.com/2013/06/context/" target="_blank" rel="external">What’s Context</a></li>
</ul>
<h3 id="VR"><a href="#VR" class="headerlink" title="VR"></a>VR</h3><ul>
<li><a href="https://developers.google.com/vr/android/" target="_blank" rel="external">https://developers.google.com/vr/android/</a></li>
</ul>
<h3 id="Android-开发程序员必备网站"><a href="#Android-开发程序员必备网站" class="headerlink" title="Android 开发程序员必备网站"></a>Android 开发程序员必备网站<p></p></h3><ul>
<li><a href="http://www.jianshu.com/p/34d643c6db3a" target="_blank" rel="external">http://www.jianshu.com/p/34d643c6db3a</a></li>
</ul>
<h3 id="基于Android-最新技术开发的APP合集"><a href="#基于Android-最新技术开发的APP合集" class="headerlink" title="基于Android 最新技术开发的APP合集"></a>基于Android 最新技术开发的APP合集<p></p></h3><ul>
<li><a href="http://www.jianshu.com/p/34d643c6db3a" target="_blank" rel="external">http://www.jianshu.com/p/34d643c6db3a</a><p></p></li>
<li><a href="https://github.com/googlesamples" target="_blank" rel="external">https://github.com/googlesamples</a><p></p></li>
<li><a href="http://android-developers.blogspot.sg/2015/04/new-android-code-samples.html" target="_blank" rel="external">http://android-developers.blogspot.sg/2015/04/new-android-code-samples.html</a><p></p></li>
<li><a href="http://blog.csdn.net/singwhatiwanna/article/details/38168103" target="_blank" rel="external">http://blog.csdn.net/singwhatiwanna/article/details/38168103</a><p></p></li>
<li><p><a href="http://appxcode.com/index.php?con=index&amp;act=category&amp;cid=5" target="_blank" rel="external">http://appxcode.com/index.php?con=index&amp;act=category&amp;cid=5</a></p><p></p>
<p>  <strong>APK Analyzer</strong></p>
<pre><code>Google 推出了一个APK分析器，现在可以很方便的使用 Android Studio 进行 APK 分析。
具体用法点击 Build -&gt; Analyze APK 然后选择你要分析的 APK 文件就可以了。
查看 xml 资源文件
还可以对两个 apk 进行比较
</code></pre></li>
</ul>
<h3 id="优秀电影"><a href="#优秀电影" class="headerlink" title="优秀电影"></a>优秀电影</h3><ul>
<li>赛德克巴莱</li>
<li>窃听风暴</li>
<li>第一滴血</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;菜根谭-——-洪应明-必读经典！&quot;&gt;&lt;a href=&quot;#菜根谭-——-洪应明-必读经典！&quot; class=&quot;headerlink&quot; title=&quot;菜根谭 —— 洪应明  必读经典！&quot;&gt;&lt;/a&gt;菜根谭 —— 洪应明  必读经典！&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;stron
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开发练习素材，不至于素材</title>
    <link href="http://yoursite.com/2017/08/02/%E5%BC%80%E5%8F%91%E7%B4%A0%E6%9D%90/"/>
    <id>http://yoursite.com/2017/08/02/开发素材/</id>
    <published>2017-08-02T02:21:02.362Z</published>
    <updated>2017-03-04T17:06:58.826Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/marktony/Awesome_APIs/blob/master/Chinese.md" target="_blank" rel="external">marktony/Awesome_APIs</a></p>
<p><a href="http://www.jianshu.com/p/f6b71cd44696" target="_blank" rel="external">TonnyL大神的《如何用一周时间开发一款Android APP并在Google Play上线》</a></p>
<p>图：<br><a href="https://dribbble.com/" target="_blank" rel="external">https://dribbble.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/marktony/Awesome_APIs/blob/master/Chinese.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;marktony/Awesome_APIs&lt;/a&gt;&lt;/p&gt;
&lt;p
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kotlin 协程</title>
    <link href="http://yoursite.com/2017/08/02/Kotlin%20%E5%8D%8F%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/08/02/Kotlin 协程/</id>
    <published>2017-08-02T02:21:02.331Z</published>
    <updated>2017-03-06T05:06:26.862Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://mp.weixin.qq.com/s?__biz=MzIzMTYzOTYzNA==&amp;mid=2247483875&amp;idx=1&amp;sn=b1b565f651ee1221d4bda19ab12009ce&amp;chksm=e8a05ededfd7d7c878c1c483c577ec53bcf42ee4cb0fe5d13f29d12ff62a1e335c4afa616ffa#rd" target="_blank" rel="external">https://mp.weixin.qq.com/s?__biz=MzIzMTYzOTYzNA==&amp;mid=2247483875&amp;idx=1&amp;sn=b1b565f651ee1221d4bda19ab12009ce&amp;chksm=e8a05ededfd7d7c878c1c483c577ec53bcf42ee4cb0fe5d13f29d12ff62a1e335c4afa616ffa#rd</a></p>
<p><strong>一句话，有了协程，你的异步程序看起来就像同步代码一样。</strong></p>
<pre><code>V:View,关注处理视图的可视化及与用户交互
P:Presenter,关注业务处理
</code></pre><p>###在MVP模式里通常包含4个要素：<br>     (1)View:负责绘制UI元素、与用户进行交互(在Android中体现为Activity);<br>     (2)View interface:需要View实现的接口，View通过View interface与Presenter进行交互，降低耦合，方便进行单元测试;<br>     (3)Model:负责存储、检索、操纵数据(有时也实现一个Model interface用来降低耦合);<br>     (4)Presenter:作为View与Model交互的中间纽带，处理与用户交互的负责逻辑。<br><img src="http://img.blog.csdn.net/20150309135723885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdmVjdG9yX3lp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p>###总结：</p>
<pre><code>V:持有P的引用，项目规格不大，可以不使用P的接口
P:持有M、V的接口实现对象

**Note:** 
防止Activity或Fragment声明周期结束后，一般执行耗时操作的Presenter层因为持有对Activity或Fragment的强引用，导致内存泄漏。

**处理方法：**
1.  解除绑定关系，在V层生命周期的OnDestory()中，调用P层持有的V，将其置空，解除和P层的关联。
2.  为了弥补在特殊情况下，如系统突然回收内存，导致Activity的onStop、onDestory没有执行便被干掉，造成上一种方式解除绑定代码没有被执行，特还需要使用软引用或弱引用。


/**
 * code from Android源码设计模式
 */
public abstract class BasePresenter&lt;T&gt; {
    protected Reference&lt;T&gt; mViewRef;

    public void attachView(T view) {
        mViewRef = new WeakReference&lt;T&gt;(view);
    }

    protected T getView() {
        return mViewRef.get();
    }

    protected void detachView() {
        if (mViewRef != null) {
            mViewRef.clear();
            mViewRef = null;
        }
    }
}

public abstract class MVPBaseActivity&lt;V, T extends BasePresenter&lt;V&gt;&gt; extends AppCompatActivity {
    BasePresenter mPresenter;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mPresenter = createPresenter();
        mPresenter.attachView((V) this);
    }

    public abstract T createPresenter();

    @Override
    public void onDestroy() {
        mPresenter.detachView();
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIzMTYzOTYzNA==&amp;amp;mid=2247483875&amp;amp;idx=1&amp;amp;sn=b1b565f651ee1221d4bda19ab12009ce&amp;amp;ch
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Toolbar</title>
    <link href="http://yoursite.com/2017/08/02/Toolbar/"/>
    <id>http://yoursite.com/2017/08/02/Toolbar/</id>
    <published>2017-08-02T02:21:02.331Z</published>
    <updated>2017-03-16T01:44:26.265Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>即时通讯之环信3.0集成采坑</title>
    <link href="http://yoursite.com/2017/08/02/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8B%E7%8E%AF%E4%BF%A1%E9%9B%86%E6%88%90%E9%87%87%E5%9D%91/"/>
    <id>http://yoursite.com/2017/08/02/即时通讯之环信集成采坑/</id>
    <published>2017-08-02T02:21:02.315Z</published>
    <updated>2017-03-24T05:18:17.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集成流程："><a href="#集成流程：" class="headerlink" title="集成流程："></a>集成流程：</h1><h3 id="1、官网下载-SDK-Demo源码"><a href="#1、官网下载-SDK-Demo源码" class="headerlink" title="1、官网下载 *SDK + Demo源码"></a>1、官网下载 <em>*SDK + Demo源码</em></h3><h3 id="2、将Demo中examples下的ChatDemoUI3-0导入Android-Studio，然后再将easeui作为module导入，使easeui作为ChatDemoUI3-0的依赖工程。"><a href="#2、将Demo中examples下的ChatDemoUI3-0导入Android-Studio，然后再将easeui作为module导入，使easeui作为ChatDemoUI3-0的依赖工程。" class="headerlink" title="2、将Demo中examples下的ChatDemoUI3.0导入Android Studio，然后再将easeui作为module导入，使easeui作为ChatDemoUI3.0的依赖工程。"></a>2、将Demo中<strong>examples</strong>下的<strong>ChatDemoUI3.0</strong>导入Android Studio，然后再将<strong>easeui</strong>作为module导入，使<strong>easeui</strong>作为<strong>ChatDemoUI3.0</strong>的依赖工程。</h3><h3 id="重点正式开始"><a href="#重点正式开始" class="headerlink" title="重点正式开始:"></a><strong>重点正式开始:</strong></h3><h3 id="3-在自己的项目中，如步骤2，将easeui作为medule导入并作为依赖项目"><a href="#3-在自己的项目中，如步骤2，将easeui作为medule导入并作为依赖项目" class="headerlink" title="3.在自己的项目中，如步骤2，将easeui作为medule导入并作为依赖项目"></a>3.在自己的项目中，如步骤2，将easeui作为medule导入并作为依赖项目</h3><h3 id="4-此时可能报错如下："><a href="#4-此时可能报错如下：" class="headerlink" title="4.此时可能报错如下："></a>4.此时可能报错如下：</h3><pre><code>警告或错误1： warning: string &apos;delete_target_uninstall_label&apos; has no default translationin
解决方案：[参考1](https://zhidao.baidu.com/question/1830062383679887660.html)

报错2：  duplicate XXX...
解决方案：[参考2](http://blog.csdn.net/chenqiuping_ls/article/details/53409297)

报错3：Test工程报错，原因为误删app build.gradle部分文件依赖部分，[参考](http://blog.csdn.net/pkandroid/article/details/61535978)

可能还有其他问题，同样参考[参考2](http://blog.csdn.net/chenqiuping_ls/article/details/53409297)
</code></pre><h3 id="5-Clean，重新构建，OK"><a href="#5-Clean，重新构建，OK" class="headerlink" title="5.Clean，重新构建，OK"></a>5.Clean，重新构建，OK</h3><hr>
<h2 id="完整App-build-gradle文件内容如下："><a href="#完整App-build-gradle文件内容如下：" class="headerlink" title="完整App build.gradle文件内容如下："></a>完整App build.gradle文件内容如下：</h2><pre><code>`
</code></pre><p>apply plugin: ‘com.android.application’</p>
<pre><code>android {
    compileSdkVersion 25
    buildToolsVersion &quot;25.0.2&quot;
    defaultConfig {
        applicationId &quot;io.github.cuncaojin.cloudplay&quot;
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName &quot;1.0&quot;
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;
        }
    }
    //use legacy for android 6.0
    useLibrary &apos;org.apache.http.legacy&apos;
    packagingOptions {
        exclude &apos;META-INF/DEPENDENCIES.txt&apos;
        exclude &apos;META-INF/LICENSE.txt&apos;
        exclude &apos;META-INF/NOTICE.txt&apos;
        exclude &apos;META-INF/NOTICE&apos;
        exclude &apos;META-INF/LICENSE&apos;
        exclude &apos;META-INF/DEPENDENCIES&apos;
        exclude &apos;META-INF/notice.txt&apos;
        exclude &apos;META-INF/license.txt&apos;
        exclude &apos;META-INF/dependencies.txt&apos;
        exclude &apos;META-INF/LGPL2.1&apos;
    }
}

dependencies {
    compile fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;)
    androidTestCompile(&apos;com.android.support.test.espresso:espresso-core:2.2.2&apos;, {
        exclude group: &apos;com.android.support&apos;, module: &apos;support-annotations&apos;
    })
    //Optional compile for GCM (Google Cloud Messaging).
    compile &apos;com.android.support:support-v4:25.3.0&apos;
    compile &apos;com.android.support:appcompat-v7:25.3.0&apos;
    compile &apos;com.android.support.constraint:constraint-layout:1.0.2&apos;
    compile &apos;com.android.support:design:25.3.0&apos;
    compile &apos;com.android.support:cardview-v7:25.3.0&apos;
    compile &apos;com.android.support:recyclerview-v7:25.3.0&apos;
    compile &apos;com.google.code.gson:gson:2.7&apos;
    compile &apos;com.google.android.gms:play-services-gcm:10.2.1&apos;
    compile &apos;com.squareup.okhttp:okhttp:2.0.0&apos;
    testCompile &apos;junit:junit:4.12&apos;
    // 环信
    compile project(&apos;:easeui&apos;)
    compile files(&apos;libs/android-support-multidex.jar&apos;)
    compile files(&apos;libs/bolts-tasks-1.4.0.jar&apos;)
    compile files(&apos;libs/umeng-analytics-v5.2.4.jar&apos;)
    compile files(&apos;libs/parse-android-1.13.0.jar&apos;)
    compile files(&apos;libs/umeng-update-v2.6.0.1.jar&apos;)
}
</code></pre><p>`</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><pre><code>1、http://blog.csdn.net/chenqiuping_ls/article/details/53409297
2、https://zhidao.baidu.com/question/1830062383679887660.html
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;集成流程：&quot;&gt;&lt;a href=&quot;#集成流程：&quot; class=&quot;headerlink&quot; title=&quot;集成流程：&quot;&gt;&lt;/a&gt;集成流程：&lt;/h1&gt;&lt;h3 id=&quot;1、官网下载-SDK-Demo源码&quot;&gt;&lt;a href=&quot;#1、官网下载-SDK-Demo源码&quot; class
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java基础重温</title>
    <link href="http://yoursite.com/2017/08/02/Java%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/08/02/Java基础/</id>
    <published>2017-08-02T02:21:02.300Z</published>
    <updated>2017-06-19T09:19:59.669Z</updated>
    
    <content type="html"><![CDATA[<p><strong>动态绑定</strong></p>
<ul>
<li>动态绑定，是指在执行期间（非编译期）判断所引用对象的实际类型，根据其实际的类型调用其相应的方法</li>
<li>Animal animal = new Cat();</li>
<li>animal.eat();</li>
</ul>
<p><strong>类对象的加载</strong></p>
<pre><code>public class StaticDemo {
    private static StaticDemo instance = new StaticDemo();
    static int n1;
    static int n2 = 3;
    private static StaticDemo instance2 =  new StaticDemo();
    int n3;
    int n4 = 5;

    public StaticDemo() {
        System.out.println(&quot;------构造------&quot;);
        System.out.println(++n1);
        System.out.println(++n2);
        System.out.println(++n3);
        System.out.println(++n4);
    }

    public static StaticDemo getInstance(){
        return instance;
    }

    public static void main(String[] args) {
        StaticDemo instance = StaticDemo.getInstance();
        System.out.println(&quot;--------main---------&quot;);
        System.out.println(n1);
        System.out.println(n2);
        System.out.println(instance.n3);
        System.out.println(instance.n4);
        System.out.println(instance2.n3);
        System.out.println(instance2.n4);
    }
}

//////////////////////////////////////////////////    
------构造------
1
1
1
6
------构造------
2
4
1
6
--------main---------
2
4
1
6
1
6
////////////////////////////////////////////////////
分析：
1、先对static按照文件中顺序，先默认初始化，再显示初始化。
2、显示初始化时，创建对象，则接下来继续执行如下：
    1）对成员变量默认初始化
    2）对成员显示初始化
    3）执行构造方法
</code></pre><p><strong>局部内部类访问局部变量，局部变量必须被final修饰</strong></p>
<pre><code>因为局部变量会随着方法的调用结束而消失，这个时候，局部对象还没有从堆内存中消失，还要使用那个局部变量。为了让数据还能继续使用，使用final修饰，这样在堆内存里存储的实际上是一个常量值。（可通过反编译查看）
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;动态绑定&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态绑定，是指在执行期间（非编译期）判断所引用对象的实际类型，根据其实际的类型调用其相应的方法&lt;/li&gt;
&lt;li&gt;Animal animal = new Cat();&lt;/li&gt;
&lt;li&gt;animal.ea
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/08/02/hello-world/"/>
    <id>http://yoursite.com/2017/08/02/hello-world/</id>
    <published>2017-08-02T02:05:20.934Z</published>
    <updated>2017-08-02T02:05:20.934Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
